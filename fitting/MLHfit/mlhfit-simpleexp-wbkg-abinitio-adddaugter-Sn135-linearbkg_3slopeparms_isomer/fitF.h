/*****************************************************************************
 * Project: RooFit                                                           *
 *                                                                           *
  * This code was autogenerated by RooClassFactory                            *
 *****************************************************************************/

#ifndef FITF
#define FITF

#include "RooAbsPdf.h"
#include "RooRealProxy.h"
#include "RooCategoryProxy.h"
#include "RooAbsReal.h"
#include "RooAbsCategory.h"

#define knri 9
#define kmaxpar 5
#define kmaxndecay 10
#define kmaxpaths 100


#define kmaxparms 1000
//#define neueff 0.613384

class fitF : public RooAbsPdf {
public:
  fitF() {} ;
  fitF(const char *name, const char *title,
              RooAbsReal& _x,
              RooAbsCategory& _y,
              RooAbsReal& _neueff,
              RooAbsReal* _p);
  fitF(const fitF& other, const char* name=0) ;
  virtual TObject* clone(const char* newname) const { return new fitF(*this,newname); }
  inline virtual ~fitF() { }

protected:

  RooRealProxy x ;
  RooCategoryProxy y ;
  RooRealProxy neueff ;
  RooRealProxy *p[kmaxparms] ;
  Double_t evaluate() const ;

  Double_t corefcn(Int_t ndecay,Int_t* decaymap,Int_t* nneu, Double_t* b1n,Double_t* b2n,Double_t* lamda,Double_t N0,Double_t t) const;
  Double_t fcn_gen(Double_t t, Double_t *par) const;
  Double_t fcn_gen_w1neutron(Double_t t, Double_t *par) const;
  Double_t fcn_gen_w2neutron(Double_t t, Double_t *par) const;


private:

  ClassDef(fitF,1) // Your description goes here...
};

#endif
